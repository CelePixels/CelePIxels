{"version":3,"sources":["connection.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["SequenceType","sendTransactions","connection","wallet","instructionSet","signersSet","a","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","StopOnFailure","Promise","all","number","txs","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","state","onClick","gatekeeper","variant","CircularProgress","goLiveDate","cluster","process","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Card","MintButtonContainer","Logo","Menu","Menu2","SolExplorerLink","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","ShimmerTitle","h1","GoldTitle","h2","LogoAligner","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","whitelistTokenBalance","setWhitelistTokenBalance","open","severity","undefined","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","displaySuccess","mintPublicKey","remaining","confetti","particleCount","spread","origin","y","program","mint","anchor","Keypair","generate","mintOneToken","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","getCandyMachineState","candyMachineId","cndy","divider","Array","join","tokenMint","toNumber","whitelistMintSettings","discountPrice","getAtaForMint","getTokenAccountBalance","tokenBalance","uiAmount","href","target","rel","alt","src","toLocaleString","elevation","label","date","toDate","onMount","completed","onComplete","renderer","days","hours","minutes","seconds","signTransaction","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","require","network","Connection","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","anchorWallet","provider","preflightCommitment","fetchIdl","idl","account","fetch","id","endSettings","endSettingType","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t"],"mappings":"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","file":"static/js/main.06673f3e.chunk.js","sourcesContent":["import {\n    Keypair,\n    Commitment,\n    Connection,\n    RpcResponseAndContext,\n    SignatureStatus,\n    SimulatedTransactionResponse,\n    Transaction,\n    TransactionInstruction,\n    TransactionSignature,\n    Blockhash,\n    FeeCalculator,\n  } from '@solana/web3.js';\n  \n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n  \n  interface BlockhashAndFeeCalculator {\n    blockhash: Blockhash;\n    feeCalculator: FeeCalculator;\n  }\n  \n  export const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n  ) => {\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n  \n    const tx = await connection.getParsedConfirmedTransaction(txid);\n  \n    const errors: string[] = [];\n    if (tx?.meta && tx.meta.logMessages) {\n      tx.meta.logMessages.forEach(log => {\n        const regex = /Error: (.*)/gm;\n        let m;\n        while ((m = regex.exec(log)) !== null) {\n          // This is necessary to avoid infinite loops with zero-width matches\n          if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n          }\n  \n          if (m.length > 1) {\n            errors.push(m[1]);\n          }\n        }\n      });\n    }\n  \n    return errors;\n  };\n  \n  export enum SequenceType {\n    Sequential,\n    Parallel,\n    StopOnFailure,\n  }\n  \n  export async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n  ): Promise<(string | undefined)[]> {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners: Record<number, boolean> = {};\n    instructions = instructions.filter((instr, i) => {\n      if (instr.length > 0) {\n        return true;\n      } else {\n        toRemoveSigners[i] = true;\n        return false;\n      }\n    });\n    let ids: string[] = [];\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n  \n    while (stopPoint < instructions.length && tries < 3) {\n      instructions = instructions.slice(stopPoint, instructions.length);\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n  \n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\n      else tries = 0;\n  \n      try {\n        if (instructions.length === 1) {\n          const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n          );\n          ids.push(id.txid);\n          stopPoint = 1;\n        } else {\n          const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n          );\n          ids = ids.concat(txs.map(t => t.txid));\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n      );\n      lastInstructionsLength = instructions.length;\n    }\n  \n    return ids;\n  }\n  \n  export const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    const unsignedTxns: Transaction[] = [];\n  \n    if (!block) {\n      block = await connection.getRecentBlockhash(commitment);\n    }\n  \n    for (let i = 0; i < instructionSet.length; i++) {\n      const instructions = instructionSet[i];\n      const signers = signersSet[i];\n  \n      if (instructions.length === 0) {\n        continue;\n      }\n  \n      let transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      transaction.recentBlockhash = block.blockhash;\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n  \n      if (signers.length > 0) {\n        transaction.partialSign(...signers);\n      }\n  \n      unsignedTxns.push(transaction);\n    }\n  \n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n  \n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n  \n    let breakEarlyObject = { breakEarly: false, i: 0 };\n    console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n    );\n    for (let i = 0; i < signedTxns.length; i++) {\n      const signedTxnPromise = sendSignedTransaction({\n        connection,\n        signedTransaction: signedTxns[i],\n      });\n  \n      signedTxnPromise\n        .then(({ txid, slot }) => {\n          successCallback(txid, i);\n        })\n        .catch(reason => {\n          // @ts-ignore\n          failCallback(signedTxns[i], i);\n          if (sequenceType === SequenceType.StopOnFailure) {\n            breakEarlyObject.breakEarly = true;\n            breakEarlyObject.i = i;\n          }\n        });\n  \n      if (sequenceType !== SequenceType.Parallel) {\n        try {\n          await signedTxnPromise;\n        } catch (e) {\n          console.log('Caught failure', e);\n          if (breakEarlyObject.breakEarly) {\n            console.log('Died on ', breakEarlyObject.i);\n            // Return the txn we failed on by index\n            return {\n              number: breakEarlyObject.i,\n              txs: await Promise.all(pendingTxns),\n            };\n          }\n        }\n      } else {\n        pendingTxns.push(signedTxnPromise);\n      }\n    }\n  \n    if (sequenceType !== SequenceType.Parallel) {\n      await Promise.all(pendingTxns);\n    }\n  \n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n  };\n  \n  export const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    const rawTransaction = transaction.serialize();\n    let options = {\n      skipPreflight: true,\n      commitment,\n    };\n  \n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n  \n    if (awaitConfirmation) {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n      slot = confirmation?.slot || 0;\n  \n      if (confirmation?.err) {\n        const errors = await getErrorForTransaction(connection, txid);\n  \n        console.log(errors);\n        throw new Error(`Raw transaction ${txid} failed`);\n      }\n    }\n  \n    return { txid, slot };\n  };\n  \n  export const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    if (beforeSend) {\n      beforeSend();\n    }\n  \n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n  \n    return { txid, slot };\n  };\n  \n  export const getUnixTs = () => {\n    return new Date().getTime() / 1000;\n  };\n  \n  const DEFAULT_TIMEOUT = 30000;\n  \n  export async function sendSignedTransaction({\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT,\n  }: {\n    signedTransaction: Transaction;\n    connection: Connection;\n    sendingMessage?: string;\n    sentMessage?: string;\n    successMessage?: string;\n    timeout?: number;\n  }): Promise<{ txid: string; slot: number }> {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n    );\n  \n    console.log('Started awaiting confirmation for', txid);\n  \n    let done = false;\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection.sendRawTransaction(rawTransaction, {\n          skipPreflight: true,\n        });\n        await sleep(500);\n      }\n    })();\n    try {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n  \n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n  \n      slot = confirmation?.slot || 0;\n    } catch (err: any) {\n      console.error('Timeout Error caught', err);\n      if (err.timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (e) { }\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      // throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n  \n    console.log('Latency', txid, getUnixTs() - startTime);\n    return { txid, slot };\n  }\n  \n  async function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n    );\n  \n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n  \n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  \n  async function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n  ): Promise<SignatureStatus | null | void> {\n    let done = false;\n    let status: SignatureStatus | null | void = {\n      slot: 0,\n      confirmations: 0,\n      err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Rejecting for timeout...');\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n        );\n      } catch (e) {\n        done = true;\n        console.error('WS error in setup', txid, e);\n      }\n      while (!done && queryStatus) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            status = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!status) {\n                console.log('REST null result for', txid, status);\n              } else if (status.err) {\n                console.log('REST error for', txid, status);\n                done = true;\n                reject(status.err);\n              } else if (!status.confirmations) {\n                console.log('REST no confirmations for', txid, status);\n              } else {\n                console.log('REST confirmation for', txid, status);\n                done = true;\n                resolve(status);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(2000);\n      }\n    });\n  \n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId])\n      connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n  }\n  export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  ","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                candyMachine?.state.isSoldOut || isSoldOut ||\n                isMinting ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport { Snackbar, Paper, LinearProgress, Chip } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { toDate, AlertState, getAtaForMint } from './utils';\nimport { MintButton } from './MintButton';\nimport {\n    CandyMachine,\n    awaitTransactionSignatureConfirmation,\n    getCandyMachineState,\n    mintOneToken,\n    CANDY_MACHINE_PROGRAM,\n} from \"./candy-machine\";\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 400px;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  opacity: 1;\n  border-radius: 30px;\n  user-select: none;\n`;\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(--card-background-lighter-color) !important;\n  margin: 5px;\n  padding: 24px;\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst Logo = styled.div`\n  flex: 0 0 auto;\n\n  img {\n    height: 60px;\n  }\n`;\nconst Menu = styled.ul`\n  list-style: none;\n  display: inline-flex;\n  flex: 1 0 auto;\n\n  li {\n    margin: 0 12px;\n\n    a {\n      color: var(--main-text-color);\n      list-style-image: none;\n      list-style-position: outside;\n      list-style-type: none;\n      outline: none;\n      text-decoration: none;\n      text-size-adjust: 100%;\n      touch-action: manipulation;\n      transition: color 0.3s;\n      padding-bottom: 15px;\n\n      img {\n        max-height: 26px;\n      }\n    }\n\n    a:hover, a:active {\n      color: rgb(131, 146, 161);\n      border-bottom: 4px solid var(--title-text-color);\n    }\n\n  }\n`;\nconst Menu2 = styled.ul`\n  list-style: none;\n  display: inline-flex;\n  flex: 1 0 auto;\n  align-items: right;\n  justify-content: right;\n\n  li {\n    margin: 0 12px;\n    align-items: right;\n\n    a {\n      color: var(--main-text-color);\n      list-style-image: none;\n      list-style-position: outside;\n      list-style-type: none;\n      outline: none;\n      text-decoration: none;\n      text-size-adjust: 100%;\n      touch-action: manipulation;\n      transition: color 0.3s;\n      padding-bottom: 15px;\n\n      img {\n        max-height: 26px;\n      }\n    }\n\n    a:hover, a:active {\n      color: rgb(131, 146, 161);\n      border-bottom: 4px solid var(--title-text-color);\n    }\n\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1em !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px 0;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color:var(--main-text-color) !important;\n  \n  > div.MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\nconst ShimmerTitle = styled.h1`\n  margin: 50px auto;\n  text-transform: uppercase;\n  animation: glow .2s ease-in-out infinite alternate;\n  color: var(--main-text-color);\n  @keyframes glow {\n    from {\n      text-shadow: 0 0 20px var(--main-text-color);\n    }\n    to {\n      text-shadow: 0 0 40px var(--title-text-color), 0 0 10px var(--title-text-color);\n    }\n  }\n`;\n\nconst GoldTitle = styled.h2`\n  color: var(--title-text-color);\n`;\n\nconst LogoAligner = styled.div`\n  display: flex;\n  align-items: center;\n  img {\n    max-height: 35px;\n    margin-right: 10px;\n  }\n`;\n\n\n\nexport interface HomeProps {\n    candyMachineId: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const wallet = useAnchorWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n    const rpcUrl = props.rpcHost;\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n            if (!wallet) return;\n\n            const cndy = await getCandyMachineState(\n                wallet as anchor.Wallet,\n                props.candyMachineId,\n                props.connection\n            );\n\n            setCandyMachine(cndy);\n            setItemsAvailable(cndy.state.itemsAvailable);\n            setItemsRemaining(cndy.state.itemsRemaining);\n            setItemsRedeemed(cndy.state.itemsRedeemed);\n\n            var divider = 1;\n            if (decimals) {\n                divider = +('1' + new Array(decimals).join('0').slice() + '0');\n            }\n\n            // detect if using spl-token to mint\n            if (cndy.state.tokenMint) {\n                setPayWithSplToken(true);\n                // Customize your SPL-TOKEN Label HERE\n                // TODO: get spl-token metadata name\n                setPriceLabel(splTokenName);\n                setPrice(cndy.state.price.toNumber() / divider);\n                setWhitelistPrice(cndy.state.price.toNumber() / divider);\n            } else {\n                setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n            }\n\n\n            // fetch whitelist token balance\n            if (cndy.state.whitelistMintSettings) {\n                setWhitelistEnabled(true);\n                if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                    if (cndy.state.tokenMint) {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                    } else {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                    }\n                }\n                let balance = 0;\n                try {\n                    const tokenBalance =\n                        await props.connection.getTokenAccountBalance(\n                            (\n                                await getAtaForMint(\n                                    cndy.state.whitelistMintSettings.mint,\n                                    wallet.publicKey,\n                                )\n                            )[0],\n                        );\n\n                    balance = tokenBalance?.value?.uiAmount || 0;\n                } catch (e) {\n                    console.error(e);\n                    balance = 0;\n                }\n                setWhitelistTokenBalance(balance);\n                setIsActive(balance > 0);\n            } else {\n                setWhitelistEnabled(false);\n            }\n        })();\n    };\n\n    const renderCounter = ({ days, hours, minutes, seconds }: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1><br />Days</Card><Card elevation={1}><h1>{hours}</h1>\n                <br />Hours</Card><Card elevation={1}><h1>{minutes}</h1><br />Mins</Card><Card elevation={1}>\n                    <h1>{seconds}</h1><br />Secs</Card></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any): void {\n        let remaining = itemsRemaining - 1;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - 1;\n            setWhitelistTokenBalance(balance);\n            setIsActive(balance > 0);\n        }\n        setItemsRedeemed(itemsRedeemed + 1);\n        const solFeesEstimation = 0.012; // approx\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - (whitelistEnabled ? whitelistPrice : price) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\n            ? (\"https://explorer.solana.com/address/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://explorer.solana.com/address/\" + mintPublicKey));\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: { y: 0.6 },\n        });\n    }\n\n    const onMint = async () => {\n        try {\n            setIsMinting(true);\n            if (wallet && candyMachine?.program && wallet.publicKey) {\n                const mint = anchor.web3.Keypair.generate();\n                const mintTxId = (\n                    await mintOneToken(candyMachine, wallet.publicKey, mint)\n                )[0];\n\n                let status: any = { err: true };\n                if (mintTxId) {\n                    status = await awaitTransactionSignatureConfirmation(\n                        mintTxId,\n                        props.txTimeout,\n                        props.connection,\n                        'singleGossip',\n                        true,\n                    );\n                }\n\n                if (!status?.err) {\n                    setAlertState({\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    });\n\n                    // update front-end amounts\n                    displaySuccess(mint.publicKey);\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    });\n                }\n            }\n        } catch (error: any) {\n            // TODO: blech:\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n\n    useEffect(() => {\n        (async () => {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [wallet, props.connection]);\n\n    useEffect(refreshCandyMachineState, [\n        wallet,\n        props.candyMachineId,\n        props.connection,\n    ]);\n\n    return (\n        <main>\n            <MainContainer>\n                <WalletContainer>\n                    <Logo><a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"\"\n                        src=\"logo.png\" /></a></Logo>\n                    <Menu>\n                        <li><a href=\"https://discord.gg/KHd2rYpv\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a>\n                        </li>\n                        <ShimmerTitle>MINT IS LIVE !</ShimmerTitle>\n                    </Menu>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton /></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                </WalletContainer>\n                <br />\n\n\n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>CelePixel</h2>\n                            <br />\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)} /><Image\n                                    src=\"celepixel.gif\"\n                                    alt=\"NFT To Mint\" /></div>\n                            <br />\n                            <p>Celebrity Pixels is a 1/1 collection of 300 unique avatars of world-famous celebrities with their uniquely famous attributes. Get yourself an avatar to show your support on social media with the\n                                perfectly balanced pixels all while receiving great rewards for holding such as 50% Royalties, Alpha Calls, DAO Voting Priority etc.\n                            </p>\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) &&\n                                <h3>You have {whitelistTokenBalance} whitelist mint(s) remaining.</h3>}\n                            {wallet && isActive &&\n                                /* <p>Total Minted : {100 - (itemsRemaining * 100 / itemsAvailable)}%</p>}*/\n                                <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\n                                value={100 - (itemsRemaining * 100 / itemsAvailable)} />}\n                            <br />\n                            <MintButtonContainer>\n                                {!isActive && candyMachine?.state.goLiveDate ? (\n                                    <Countdown\n                                        date={toDate(candyMachine?.state.goLiveDate)}\n                                        onMount={({ completed }) => completed && setIsActive(true)}\n                                        onComplete={() => {\n                                            setIsActive(true);\n                                        }}\n                                        renderer={renderCounter}\n                                    />) : (\n                                    !wallet ? (\n                                        <ConnectButton>Connect Wallet</ConnectButton>\n                                    ) :\n                                        candyMachine?.state.gatekeeper &&\n                                            wallet.publicKey &&\n                                            wallet.signTransaction ? (\n                                            <GatewayProvider\n                                                wallet={{\n                                                    publicKey:\n                                                        wallet.publicKey ||\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                                                    //@ts-ignore\n                                                    signTransaction: wallet.signTransaction,\n                                                }}\n                                                // // Replace with following when added\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                                                gatekeeperNetwork={\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                                                } // This is the ignite (captcha) network\n                                                /// Don't need this for mainnet\n                                                clusterUrl={rpcUrl}\n                                                options={{ autoShowModal: false }}\n                                            >\n                                                <MintButton\n                                                    candyMachine={candyMachine}\n                                                    isMinting={isMinting}\n                                                    isActive={isActive}\n                                                    isSoldOut={isSoldOut}\n                                                    onMint={onMint}\n                                                />\n                                            </GatewayProvider>\n                                        ) : (\n                                            <MintButton\n                                                candyMachine={candyMachine}\n                                                isMinting={isMinting}\n                                                isActive={isActive}\n                                                isSoldOut={isSoldOut}\n                                                onMint={onMint}\n                                            />\n                                        ))}\n                            </MintButtonContainer>\n                            <br />\n                            {wallet && isActive && solanaExplorerLink &&\n                                <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on Solana\n                                    Explorer</SolExplorerLink>}\n                        </NFT>\n                    </DesContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h1>RoadMap</h1>\n                            <p>Stage 1: Art Development & Marketing</p>\n                            <br></br>\n                            <p>Stage 2: Listing on Popular Secondary Marketplace</p>\n                            <br></br>\n                            <p>Stage 3: Engagement With Cele Community</p>\n                            <br></br>\n                            <p>Stage 4: GRAPE Verification</p>\n                            <br></br>\n                            <p>Stage 5: First Royalty Airdrop</p>\n                            <br></br>\n                            <p>Stage 6: DAO Voting</p>\n                            <br></br>\n                            <p>Stage 7: Cele Holders Inclusive Merchandise</p>\n                        </NFT>\n                    </DesContainer>\n                    <DesContainer>\n                        <NFT elevation={4}>\n                            <h1>Details</h1>\n                            <p>Art Development of the project and advertizing it on various social media platforms to build a CELE Community.</p>\n                            <p>Striving to be listed on popular secondary marketplaces such as <a href=\"https://alpha.art\">Alphaart</a>, <a href=\"https://magiceden.io/ \">MagicEden</a>, <a href=\"https://solanart.io/ \"> Solanart</a>, <a href=\"https://solsea.io/\">Solsea</a> etc.</p>\n                            <p>Engaging with the CELE Community with weekly games, karoke nights, giveaways, etc. </p>\n                            <p>Grape verifaction will utilized to connect the Cele Holders together to bring further less contrast between them; also being able to participate in future giveaways and voting.</p>\n                            <p>50% of all Cele secondary market profits are distributed to holders throughout the weeks coming.\n                                This will be given out through $SOL airdrop and Organised Floor sweeping.</p>\n                            <p>Take part in voting on the next business venture or submit your own idea. Every wallet gets one vote regardless of the amount of celes. Whales are great,\n                                but they should not be the deciding factor of our community.</p>\n                            <p>Mint Revenue is to be allocated towards the future stages of the project as per the decision of the Cele Community; We are far more than just a project, we will dominate the NFT space.</p>\n                            <p>The team will release merchandise in the near future exclusive to CelePixel Holders. This will be used to further fund our expenses in the environment.</p>\n                            <p>As a team, we think there shouldn't be any rarity in the project, as it shows clear bias to certain traits of the avatars; Beauty is in everything so we let the CELE Community decide to pick the ones that they think is more appealing to them.</p>\n                        </NFT>\n                    </DesContainer>\n                    <NFT elevation={3}>\n                        <LogoAligner><GoldTitle><Menu>\n                            <li><img src=\"DiscordOrig.ico\" alt=\"\"></img><a href=\"https://discord.gg/KHd2rYpv\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a>\n                            </li>\n                            <li><img src=\"Twitter.png\" alt=\"\"></img><a href=\"https://twitter.com/CelePixel\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>\n                            </li>\n                        </Menu><Menu2><li><a href=\"http://celepixel.tk/tos\" target=\"_blank\" rel=\"noopener noreferrer\">Terms of Service</a></li></Menu2></GoldTitle></LogoAligner>\n                    </NFT>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({ ...alertState, open: false })}\n            >\n                <Alert\n                    onClose={() => setAlertState({ ...alertState, open: false })}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={txTimeout}\n                rpcHost={rpcHost}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | [number, anchor.BN];\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachine> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate &&\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachine,\n    payer: anchor.web3.PublicKey,\n    mint: anchor.web3.Keypair\n): Promise<(string | undefined)[]> => {\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}"],"sourceRoot":""}